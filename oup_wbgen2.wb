peripheral {
    name = "OUP USB Device Controller";
    description = "An open source USB device controller for FPGAs";
    hdl_entity = "oup_wb_interface";
    prefix = "oup";

-- Registers to interface directly with the OUP ULPI HDL module while the USB
-- device state machine is completed.
    reg {
        name = "Instruction register";
        description = "Instruction register. Contains instruction register \
                       and instruction-related signals.";
        prefix = "ins";
        field {
            name = "Instruction";
            description = "Instruction byte. Must be held constant until \
                           instruction execution is done.";
            prefix = "instruction";
            type = SLV;
            size = 8;
            align = 8;
            -- type of our field - PASS_THROUGH. In this mode, the slave core
            -- is not storing the register value. Instead it provides the raw
            -- value (taken from the wishbone data input) and a strobe signal,
            -- asserted for single clock cycle upon write operation to the
            -- register.
        };
        field {
            name = "Execute";
            description = "Execute bit. To execute instruction, assert for \
                           one cycle.<br>\
                              1 means execute next clock cycle.<br>\
                              0 means don't execute.<br>\
                           This bit always reads 0.";
            type = MONOSTABLE;
            prefix = "exec";
            access_bus = WRITE_ONLY;
            access_dev = READ_ONLY;
        };
        field {
            name = "Reset";
            description = "Resets the ULPI state machine. Write 1 to \
                           activate, then wait for exec_done to be \
                           set. There is no need to write a 0. This bit \
                           always reads 0.";
            type = MONOSTABLE;
            prefix = "reset";
            access_bus = WRITE_ONLY;
            access_dev = READ_ONLY;
        };
        field {
            name = "Execution done";
            description = "Execution done bit.<br>\
                              1 means the execution is done.<br>\
                              0 means the execution is not done yet.";
            type = BIT;
            prefix = "exec_done";
            access_bus = READ_ONLY;
            access_dev = WRITE_ONLY;
        };
        field {
            name = "Execution aborted";
            description = "Execution aborted bit.<br>\
                              1 means the execution was aborted.<br>\
                              0 means the execution was successful.";
            type = BIT;
            prefix = "exec_aborted";
            access_bus = READ_ONLY;
            access_dev = WRITE_ONLY;
        };
    };
    reg {
        name = "ULPI phy configuration register";
        description = "Holds read and write values from the last ULPI \
                       configuration register read or write. Also holds \
                       the RX command byte";
        prefix = "phyreg";
        field {
            name = "Address field";
            description = "Address on the ULPI configuration memory<br>\
                           If you issue a register write instruction, the \
                           address written will be the last address you wrote \
                           to this register, regardless of the value you read \
                           in this register.";
            prefix = "addr";
            type = SLV;
            size = 8;
            align = 8;
            access_bus = READ_WRITE;
            access_dev = READ_WRITE;
            load = LOAD_EXT;
        };
        field {
            name = "Data field";
            description = "Data present on the ULPI configuration register \
                           being addressed by the address field.<br>\
                           If you issue a register write instruction, the \
                           data written will be the last data you wrote to \
                           this register, regardless of the value you read \
                           in this register.";
            prefix = "data";
            type = SLV;
            size = 8;
            align = 8;
            access_bus = READ_WRITE;
            access_dev = READ_WRITE;
            load = LOAD_EXT;
        };
        field {
            name = "USB PHY RX command byte";
            description = "USB PHY RX command byte. \
                           Defined in table 7 of standard.";
            prefix = "rx_cmd_byte";
            type = SLV;
            size = 8;
            align = 8;
            access_bus = READ_ONLY;
            access_dev = WRITE_ONLY;
        };
    };

};